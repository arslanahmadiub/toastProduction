{"version":3,"sources":["Services/saleServices.js","Components/SubComponents/CircularProgressGraph.jsx","Components/SubComponents/LineGraph.jsx","Components/DailyOrdersPlot.jsx","Components/FridaysPlot.jsx","Components/LaborPlot.jsx","Components/NetSalePlot.jsx","Components/SubComponents/MixGraph.jsx","Components/OrderChangePlot.jsx","Components/SaleChangePlot.jsx","Main.js","App.js","index.js"],"names":["netSaleUrl","apiEndPoint","dailySaleUrl","saleChangeUrl","orderChangeUrl","fridaysUrl","laborUrl","getNetSale","timeFrame","numberOfMonth","a","axios","method","url","getDailyOrder","getSaleChange","getOrderChange","getWeekSale","getLabor","CircularProgressGraph","props","className","LineGraph","previousMonth","predictionMonth","graphDate","graphData","colors","title","yAxisText","stroke","min","max","progress","predictionData","buttonGroup","border","color","buttonGroupActive","background","options","chart","height","type","foreColor","animations","enabled","xaxis","categories","tickAmount","labels","formatter","value","timestamp","opts","dateFormatter","Date","text","align","style","fontSize","markers","size","strokeColors","yaxis","useState","activeButtonPreviousText","setActiveButtonPreviousText","setActiveButtonPreviousValue","activeButtonPerductionText","setActiveButtonPerductionText","setActiveButtonPerductionValue","useEffect","defaultPredictionText","defaultPredictionValue","defaultPreviousValue","defaultPreviousText","position","display","width","justifyContent","paddingBottom","ButtonGroup","map","item","index","Button","onClick","setPrevious","setPrediction","series","top","left","alignItems","paddingLeft","paddingRight","legendData","flexDirection","value1","value2","date","DailyOrdersPlot","setGraphDate","setGraphData","predictionMonthValue","setPredictionMonth","previousMonthValue","setPreviousMonth","showProgress","setShowProgress","netSaleCalculation","minGraphNumber","setMinGraphNumber","maxGraphNumber","setMaxGraphNumber","legendData1","setlegendData1","legendData2","setlegendData2","legendData3","setlegendData3","previous","prediction","data","moment","format","l1","_","without","Data","Orders_3_Week_MA","l3","Orders_9_Week_MA","length","Orders_3_Week_YoY_MA","newData","name","minNumber","Math","chain","filter","isNumber","maxNumber","parseInt","console","log","curve","dashArray","e","parseFloat","toFixed","FridaysPlot","day","setDay","WeekDay","Gross_Sales","Sales_7_Day_MA","Sales_7_Day_YoY_MA","LaborPlot","Labor_1Week_MA","Labor_5Week_MA","Labor_yoy","NetSalePlot","setPredictionData","predictionDate","Prediction","predictionObject","Value","indexOfDate","indexOf","Last_week_dates","sampleArray","i","push","Last_week_data","Sales_3_Week_MA","Sales_9_Week_MA","Sales_3_Week_YoY_MA","MixGraph","val","OrderChangePlot","Orders_3Week_3_YoY_Diff_7","Orders_9Week_3_YoY_Diff_7","SaleChangePlot","Sales_3Week_3_3_YoY_Diff_7","Sales_9Week_3_YoY_Diff_7","Main","marginTop","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef03c69b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { apiEndPoint } from \"../config.json\";\r\n\r\nlet netSaleUrl = apiEndPoint + \"net_sales_plot/\";\r\nlet dailySaleUrl = apiEndPoint + \"daily_orders_plot/\";\r\nlet saleChangeUrl = apiEndPoint + \"sales_change_plot/\";\r\nlet orderChangeUrl = apiEndPoint + \"orders_change_plot/\";\r\nlet fridaysUrl = apiEndPoint + \"day_of_week_sales_plot/\";\r\nlet laborUrl = apiEndPoint + \"pay_by_sales_plot/\";\r\nlet sendEmailUrl = apiEndPoint + \"send_mail\";\r\n\r\nexport async function getNetSale(timeFrame, numberOfMonth) {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: netSaleUrl + timeFrame + \"/\" + numberOfMonth,\r\n  });\r\n}\r\n\r\nexport async function getDailyOrder(timeFrame, numberOfMonth) {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: dailySaleUrl + timeFrame + \"/\" + numberOfMonth,\r\n  });\r\n}\r\n\r\nexport async function getSaleChange(timeFrame) {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: saleChangeUrl + timeFrame,\r\n  });\r\n}\r\nexport async function getOrderChange(timeFrame) {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: orderChangeUrl + timeFrame,\r\n  });\r\n}\r\n\r\nexport async function getWeekSale(timeFrame, numberOfMonth) {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: fridaysUrl + timeFrame + \"/\" + numberOfMonth,\r\n  });\r\n}\r\nexport async function getLabor(timeFrame) {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: laborUrl + timeFrame,\r\n  });\r\n}\r\nexport async function sendEmail() {\r\n  return await axios({\r\n    method: \"get\",\r\n    url: sendEmailUrl,\r\n  });\r\n}\r\n","import React from \"react\";\r\n\r\nconst CircularProgressGraph = (props) => {\r\n  return <div className=\"loader-graph\"></div>;\r\n};\r\n\r\nexport default CircularProgressGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nimport CircularProgressGraph from \"./CircularProgressGraph\";\r\n\r\nconst LineGraph = ({\r\n  previousMonth,\r\n  predictionMonth,\r\n  graphDate,\r\n  graphData,\r\n  colors,\r\n  title,\r\n  yAxisText,\r\n  stroke,\r\n  min,\r\n  max,\r\n  progress,\r\n  predictionData,\r\n  ...props\r\n}) => {\r\n  let buttonGroup = {\r\n    border: \"1px solid #9BBB59\",\r\n    color: \"#9BBB59\",\r\n  };\r\n  let buttonGroupActive = {\r\n    border: \"1px solid #9BBB59\",\r\n    color: \"white\",\r\n    background: \"#9BBB59\",\r\n  };\r\n\r\n  let options = {\r\n    chart: {\r\n      height: 350,\r\n      type: \"line\",\r\n      foreColor: \"#9BBB59\",\r\n      animations: {\r\n        enabled: false,\r\n      },\r\n    },\r\n\r\n    colors: colors,\r\n\r\n    stroke: stroke,\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: graphDate,\r\n      tickAmount: 10,\r\n      labels: {\r\n        formatter: function (value, timestamp, opts) {\r\n          return opts.dateFormatter(new Date(timestamp), \"dd MMM yyyy\");\r\n        },\r\n      },\r\n    },\r\n    title: {\r\n      text: title,\r\n      align: \"center\",\r\n      style: {\r\n        fontSize: \"16px\",\r\n        color: \"#9BBB59\",\r\n      },\r\n    },\r\n\r\n    markers: {\r\n      size: [0, 0, 0, 5],\r\n      strokeColors: \"transperent\",\r\n    },\r\n\r\n    // annotations: {\r\n    //   position: \"back\",\r\n\r\n    //   points: [\r\n    //     {\r\n    //       x: new Date(`${predictionData && predictionData.date}`).getTime(),\r\n    //       y: predictionData && predictionData.value,\r\n    //       yAxisIndex: 0,\r\n    //       seriesIndex: 0,\r\n    //       marker: {\r\n    //         size: 5,\r\n    //         fillColor: \"#ffffff\",\r\n    //         strokeColor: \"#ff0000\",\r\n    //         strokeWidth: 2,\r\n    //         shape: \"circle\",\r\n    //         radius: 2,\r\n    //         OffsetX: 0,\r\n    //         OffsetY: 0,\r\n    //         cssClass: \"\",\r\n    //       },\r\n    //       label: {\r\n    //         borderColor: \"#ff0000\",\r\n    //         borderWidth: 1,\r\n    //         borderRadius: 2,\r\n    //         text: `Prediction ${predictionData && predictionData.date} ${\r\n    //           predictionData && predictionData.value\r\n    //         }`,\r\n    //         textAnchor: \"middle\",\r\n    //         offsetX: 0,\r\n    //         offsetY: 0,\r\n    //         style: {\r\n    //           background: \"#ff0000\",\r\n    //           color: \"#ffffff\",\r\n    //           fontSize: \"12px\",\r\n    //           fontWeight: 400,\r\n    //           fontFamily: undefined,\r\n    //           cssClass: \"apexcharts-point-annotation-label\",\r\n    //           padding: {\r\n    //             left: 5,\r\n    //             right: 5,\r\n    //             top: 5,\r\n    //             bottom: 5,\r\n    //           },\r\n    //         },\r\n    //       },\r\n    //     },\r\n    //   ],\r\n    // },\r\n\r\n    yaxis: {\r\n      min: min,\r\n      max: max,\r\n      title: {\r\n        text: yAxisText,\r\n      },\r\n      // labels: {\r\n      //   formatter: function (val) {\r\n      //     return val.toFixed(0);\r\n      //   },\r\n      // },\r\n    },\r\n  };\r\n\r\n  const [activeButtonPreviousText, setActiveButtonPreviousText] = useState(\"\");\r\n  const [activeButtonPreviousValue, setActiveButtonPreviousValue] =\r\n    useState(\"\");\r\n  const [activeButtonPerductionText, setActiveButtonPerductionText] =\r\n    useState(\"\");\r\n  const [activeButtonPerductionValue, setActiveButtonPerductionValue] =\r\n    useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setActiveButtonPerductionText(props.defaultPredictionText);\r\n    setActiveButtonPerductionValue(props.defaultPredictionValue);\r\n    setActiveButtonPreviousValue(props.defaultPreviousValue);\r\n    setActiveButtonPreviousText(props.defaultPreviousText);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   props.setPrevious(activeButtonPreviousValue);\r\n  // }, [activeButtonPreviousValue]);\r\n\r\n  // useEffect(() => {\r\n  //   props.setPrediction(activeButtonPerductionValue);\r\n  // }, [activeButtonPerductionValue]);\r\n\r\n  let handelPreviousMonth = (text, value) => {\r\n    setActiveButtonPreviousText(text);\r\n    setActiveButtonPreviousValue(value);\r\n\r\n    props.setPrevious(value);\r\n  };\r\n  let handelPreductionMonth = (text, value) => {\r\n    setActiveButtonPerductionText(text);\r\n    setActiveButtonPerductionValue(value);\r\n    props.setPrediction(value);\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          width: \"100%\",\r\n          justifyContent: \"space-between\",\r\n          paddingBottom: \"2%\",\r\n        }}\r\n      >\r\n        <ButtonGroup>\r\n          {previousMonth &&\r\n            previousMonth.map((item, index) => {\r\n              return (\r\n                <Button\r\n                  style={\r\n                    activeButtonPreviousText === item.text\r\n                      ? buttonGroupActive\r\n                      : buttonGroup\r\n                  }\r\n                  onClick={() => handelPreviousMonth(item.text, item.value)}\r\n                  key={index}\r\n                >\r\n                  {item.text}\r\n                </Button>\r\n              );\r\n            })}\r\n        </ButtonGroup>\r\n        <ButtonGroup>\r\n          {predictionMonth &&\r\n            predictionMonth.map((item, index) => {\r\n              return (\r\n                <Button\r\n                  style={\r\n                    activeButtonPerductionText === item.text\r\n                      ? buttonGroupActive\r\n                      : buttonGroup\r\n                  }\r\n                  onClick={() => handelPreductionMonth(item.text, item.value)}\r\n                  key={index}\r\n                >\r\n                  {item.text}\r\n                </Button>\r\n              );\r\n            })}\r\n        </ButtonGroup>\r\n      </div>\r\n\r\n      <ReactApexChart\r\n        options={options}\r\n        series={graphData}\r\n        type=\"line\"\r\n        height={500}\r\n      />\r\n      {/* <CircularProgress\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          color: \"#9BBB59\",\r\n          display: progress ? \"flex\" : \"none\",\r\n        }}\r\n      /> */}\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          display: progress ? \"flex\" : \"none\",\r\n        }}\r\n      >\r\n        <CircularProgressGraph />\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          width: \"100%\",\r\n          position: \"absolute\",\r\n          top: \"85px\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            justifyContent: \"space-around\",\r\n            paddingLeft: \"30%\",\r\n            paddingRight: \"30%\",\r\n          }}\r\n        >\r\n          {props.legendData &&\r\n            props.legendData.map((item, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <p style={{ color: item.color, fontSize: \"11px\" }}>\r\n                    {item.value1}\r\n                  </p>\r\n                  <p style={{ color: item.color, fontSize: \"11px\" }}>\r\n                    {item.value2}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n          {predictionData && (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <p style={{ fontSize: \"11px\", color: \"#ffffff\" }}>\r\n                Prediction {predictionData.date}\r\n              </p>\r\n              <p style={{ fontSize: \"11px\", color: \"#ffffff\" }}>\r\n                {predictionData.value}\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { getDailyOrder } from \"../Services/saleServices\";\r\nimport LineGraph from \"./SubComponents/LineGraph\";\r\nimport _ from \"lodash\";\r\n\r\nconst DailyOrdersPlot = () => {\r\n  const [graphDate, setGraphDate] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [predictionMonthValue, setPredictionMonth] = useState(\"1\");\r\n  const [previousMonthValue, setPreviousMonth] = useState(\"3\");\r\n\r\n  const [showProgress, setShowProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    netSaleCalculation(previousMonthValue, predictionMonthValue);\r\n  }, [previousMonthValue, predictionMonthValue]);\r\n\r\n  let previousMonth = [\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"3M\",\r\n      value: \"3\",\r\n    },\r\n    {\r\n      text: \"12M\",\r\n      value: \"12\",\r\n    },\r\n    {\r\n      text: \"18M\",\r\n      value: \"18\",\r\n    },\r\n  ];\r\n\r\n  let predictionMonth = [\r\n    {\r\n      text: \"0M\",\r\n      value: \"0\",\r\n    },\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"6M\",\r\n      value: \"6 \",\r\n    },\r\n  ];\r\n\r\n  const [minGraphNumber, setMinGraphNumber] = useState(0);\r\n  const [maxGraphNumber, setMaxGraphNumber] = useState(3000);\r\n\r\n  const [legendData1, setlegendData1] = useState(\"\");\r\n\r\n  const [legendData2, setlegendData2] = useState(\"\");\r\n  const [legendData3, setlegendData3] = useState(\"\");\r\n\r\n  let netSaleCalculation = async (previous, prediction) => {\r\n    try {\r\n      setShowProgress(true);\r\n      let { data } = await getDailyOrder(previous, prediction);\r\n\r\n      let date = data.Date.map((item) => {\r\n        let dateValue = moment(item).format(\"MM/DD/yyyy\");\r\n        return dateValue;\r\n      });\r\n      setGraphDate(date);\r\n\r\n      // let index = date.indexOf(moment().format(\"MM/DD/yyyy\"));\r\n\r\n      let l1 = _.without(data.Data.Orders_3_Week_MA, \"\");\r\n\r\n      // let l2 = _.without(data.Data.Orders_3_Week_YoY_MA, \"\");\r\n      let l3 = _.without(data.Data.Orders_9_Week_MA, \"\");\r\n\r\n      setlegendData1(l1[l1.length - 1]);\r\n      setlegendData2(data.Data.Orders_3_Week_YoY_MA[l1.length - 1]);\r\n\r\n      setlegendData3(l3[l3.length - 1]);\r\n      let newData = [\r\n        {\r\n          name: \"Orders 3 Week MA \",\r\n          data: data.Data.Orders_3_Week_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Orders 3 Week YoY MA\",\r\n          data: data.Data.Orders_3_Week_YoY_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Orders 9 Week MA\",\r\n          data: data.Data.Orders_9_Week_MA,\r\n          type: \"line\",\r\n        },\r\n      ];\r\n      setGraphData(newData);\r\n\r\n      let minNumber = Math.min(\r\n        _(data.Data.Orders_3_Week_MA).chain().filter(_.isNumber).min().value(),\r\n        _(data.Data.Orders_3_Week_YoY_MA)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value(),\r\n        _(data.Data.Orders_9_Week_MA).chain().filter(_.isNumber).min().value()\r\n      );\r\n\r\n      let maxNumber = Math.max(\r\n        _(data.Data.Orders_3_Week_MA).chain().filter(_.isNumber).max().value(),\r\n        _(data.Data.Orders_3_Week_YoY_MA)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value(),\r\n        _(data.Data.Orders_9_Week_MA).chain().filter(_.isNumber).max().value()\r\n      );\r\n\r\n      setMinGraphNumber(\r\n        parseInt(minNumber) === 0\r\n          ? parseInt(minNumber)\r\n          : parseInt(minNumber) - 20\r\n      );\r\n\r\n      setMaxGraphNumber(parseInt(maxNumber) + 20);\r\n      setShowProgress(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setShowProgress(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <LineGraph\r\n        previousMonth={previousMonth}\r\n        predictionMonth={predictionMonth}\r\n        graphDate={graphDate}\r\n        graphData={graphData}\r\n        colors={[\"#0E83AE\", \"#75D2EB\", \"#FF0000\"]}\r\n        title=\"Daily Orders\"\r\n        yAxisText=\"Orders\"\r\n        stroke={{\r\n          width: [2, 1, 1],\r\n          curve: [\"smooth\", \"smooth\", \"smooth\"],\r\n          dashArray: [0, 5, 0],\r\n        }}\r\n        progress={showProgress}\r\n        setPrediction={(e) => setPredictionMonth(e)}\r\n        setPrevious={(e) => setPreviousMonth(e)}\r\n        min={parseInt(minGraphNumber)}\r\n        max={parseInt(maxGraphNumber)}\r\n        defaultPreviousText={previousMonthValue + \"M\"}\r\n        defaultPreviousValue={previousMonthValue}\r\n        defaultPredictionValue={predictionMonthValue}\r\n        defaultPredictionText={predictionMonthValue + \"M\"}\r\n        legendData={[\r\n          {\r\n            value1: \"3W\",\r\n            value2: parseFloat(legendData1).toFixed(1),\r\n            color: \"#0E83AE\",\r\n          },\r\n          {\r\n            value1: \"3W-YOY\",\r\n            value2: parseFloat(legendData2).toFixed(1),\r\n            color: \"#75D2EB\",\r\n          },\r\n          {\r\n            value1: \"9W\",\r\n            value2: parseFloat(legendData3).toFixed(1),\r\n            color: \"#FF0000\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyOrdersPlot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { getWeekSale } from \"../Services/saleServices\";\r\nimport LineGraph from \"./SubComponents/LineGraph\";\r\nimport _ from \"lodash\";\r\n\r\nconst FridaysPlot = () => {\r\n  const [graphDate, setGraphDate] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [predictionMonthValue, setPredictionMonth] = useState(\"1\");\r\n  const [previousMonthValue, setPreviousMonth] = useState(\"3\");\r\n\r\n  const [showProgress, setShowProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    netSaleCalculation(previousMonthValue, predictionMonthValue);\r\n  }, [previousMonthValue, predictionMonthValue]);\r\n\r\n  let previousMonth = [\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"3M\",\r\n      value: \"3\",\r\n    },\r\n    {\r\n      text: \"12M\",\r\n      value: \"12\",\r\n    },\r\n    {\r\n      text: \"18M\",\r\n      value: \"18\",\r\n    },\r\n  ];\r\n\r\n  let predictionMonth = [\r\n    {\r\n      text: \"0M\",\r\n      value: \"0\",\r\n    },\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"6M\",\r\n      value: \"6\",\r\n    },\r\n  ];\r\n\r\n  const [minGraphNumber, setMinGraphNumber] = useState(0);\r\n  const [maxGraphNumber, setMaxGraphNumber] = useState(3000);\r\n\r\n  const [legendData1, setlegendData1] = useState(\"\");\r\n  const [legendData2, setlegendData2] = useState(\"\");\r\n  const [legendData3, setlegendData3] = useState(\"\");\r\n\r\n  const [day, setDay] = useState(\"\");\r\n\r\n  let netSaleCalculation = async (previous, prediction) => {\r\n    try {\r\n      setShowProgress(true);\r\n      let { data } = await getWeekSale(previous, prediction);\r\n      setDay(data.WeekDay);\r\n\r\n      let date = data.Date.map((item) => {\r\n        let dateValue = moment(item).format(\"MM/DD/yyyy\");\r\n\r\n        return dateValue;\r\n      });\r\n      setGraphDate(date);\r\n\r\n      // let index = date.indexOf(moment().format(\"MM/DD/yyyy\"));\r\n\r\n      let l1 = _.without(data.Data.Gross_Sales, \"\");\r\n\r\n      // let l2 = _.without(data.Data.Sales_7_Day_YoY_MA, \"\");\r\n      let l3 = _.without(data.Data.Sales_7_Day_MA, \"\");\r\n\r\n      setlegendData1(l1[l1.length - 1]);\r\n      setlegendData2(data.Data.Sales_7_Day_YoY_MA[l1.length - 1]);\r\n\r\n      setlegendData3(l3[l3.length - 1]);\r\n\r\n      let newData = [\r\n        {\r\n          name: \"Gross Sales\",\r\n          data: data.Data.Gross_Sales,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Sale 7 Days YoY MA\",\r\n          data: data.Data.Sales_7_Day_YoY_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Sale 7 Days MA\",\r\n          data: data.Data.Sales_7_Day_MA,\r\n          type: \"line\",\r\n        },\r\n      ];\r\n\r\n      let maxNumber = Math.max(\r\n        _(data.Data.Gross_Sales).chain().filter(_.isNumber).max().value(),\r\n        _(data.Data.Sales_7_Day_YoY_MA)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value(),\r\n        _(data.Data.Sales_7_Day_MA).chain().filter(_.isNumber).max().value()\r\n      );\r\n\r\n      let minNumber = Math.min(\r\n        _(data.Data.Gross_Sales).chain().filter(_.isNumber).min().value(),\r\n        _(data.Data.Sales_7_Day_YoY_MA)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value(),\r\n        _(data.Data.Sales_7_Day_MA).chain().filter(_.isNumber).min().value()\r\n      );\r\n\r\n      setMinGraphNumber(\r\n        parseInt(minNumber) === 0\r\n          ? parseInt(minNumber)\r\n          : parseInt(minNumber) - 20\r\n      );\r\n\r\n      setMaxGraphNumber(parseInt(maxNumber) + 20);\r\n      setGraphData(newData);\r\n      setShowProgress(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setShowProgress(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <LineGraph\r\n        previousMonth={previousMonth}\r\n        predictionMonth={predictionMonth}\r\n        graphDate={graphDate}\r\n        graphData={graphData}\r\n        colors={[\"#0E83AE\", \"#75D2EB\", \"#FF0000\"]}\r\n        title={`\"DOW Sales Averages\" ${day}`}\r\n        yAxisText=\"Sales\"\r\n        stroke={{\r\n          width: [2, 1, 1],\r\n          curve: [\"smooth\", \"smooth\", \"smooth\"],\r\n          dashArray: [3, 5, 0],\r\n        }}\r\n        progress={showProgress}\r\n        setPrediction={(e) => setPredictionMonth(e)}\r\n        setPrevious={(e) => setPreviousMonth(e)}\r\n        min={parseInt(minGraphNumber)}\r\n        max={parseInt(maxGraphNumber)}\r\n        defaultPreviousText={previousMonthValue + \"M\"}\r\n        defaultPreviousValue={previousMonthValue}\r\n        defaultPredictionValue={predictionMonthValue}\r\n        defaultPredictionText={predictionMonthValue + \"M\"}\r\n        legendData={[\r\n          {\r\n            value1: \"Gross Sales\",\r\n            value2: \"$\" + legendData1,\r\n            color: \"#0E83AE\",\r\n          },\r\n          {\r\n            value1: \"7D-YOY\",\r\n            value2: \"$\" + legendData2,\r\n            color: \"#75D2EB\",\r\n          },\r\n          {\r\n            value1: \"7D\",\r\n            value2: \"$\" + legendData3,\r\n            color: \"#FF0000\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FridaysPlot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { getLabor } from \"../Services/saleServices\";\r\nimport LineGraph from \"./SubComponents/LineGraph\";\r\nimport _ from \"lodash\";\r\n\r\nconst LaborPlot = () => {\r\n  const [graphDate, setGraphDate] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [predictionMonthValue, setPredictionMonth] = useState(\"6\");\r\n  const [previousMonthValue, setPreviousMonth] = useState(\"1\");\r\n\r\n  const [showProgress, setShowProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    netSaleCalculation(previousMonthValue);\r\n  }, [previousMonthValue]);\r\n\r\n  let previousMonth = [\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"3M\",\r\n      value: \"3\",\r\n    },\r\n    {\r\n      text: \"12M\",\r\n      value: \"12\",\r\n    },\r\n    {\r\n      text: \"18M\",\r\n      value: \"18\",\r\n    },\r\n  ];\r\n\r\n  // let predictionMonth = [\r\n  //   {\r\n  //     text: \"1M\",\r\n  //     value: \"1\",\r\n  //   },\r\n  //   {\r\n  //     text: \"6M\",\r\n  //     value: \"6\",\r\n  //   },\r\n  //   {\r\n  //     text: \"12M\",\r\n  //     value: \"12\",\r\n  //   },\r\n  // ];\r\n\r\n  const [minGraphNumber, setMinGraphNumber] = useState(0);\r\n  const [maxGraphNumber, setMaxGraphNumber] = useState(3000);\r\n\r\n  const [legendData1, setlegendData1] = useState(\"\");\r\n  const [legendData2, setlegendData2] = useState(\"\");\r\n  const [legendData3, setlegendData3] = useState(\"\");\r\n\r\n  let netSaleCalculation = async (previous) => {\r\n    try {\r\n      setShowProgress(true);\r\n      let { data } = await getLabor(previous);\r\n\r\n      let date = data.Date.map((item) => {\r\n        let dateValue = moment(item).format(\"MM/DD/yyyy\");\r\n\r\n        return dateValue;\r\n      });\r\n      setGraphDate(date);\r\n\r\n      // let index = date.indexOf(moment().format(\"MM/DD/yyyy\"));\r\n\r\n      let l1 = _.without(data.Data.Labor_1Week_MA, \"\");\r\n\r\n      // let l2 = _.without(data.Data.Labor_yoy, \"\");\r\n      let l3 = _.without(data.Data.Labor_5Week_MA, \"\");\r\n\r\n      setlegendData1(l1[l1.length - 1]);\r\n      setlegendData2(data.Data.Labor_yoy[l1.length - 1]);\r\n\r\n      setlegendData3(l3[l3.length - 1]);\r\n\r\n      let newData = [\r\n        {\r\n          name: \"Labor 1 Week MA\",\r\n          data: data.Data.Labor_1Week_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Labor 5 Week YoY\",\r\n          data: data.Data.Labor_yoy,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Labor 5 Week MA\",\r\n          data: data.Data.Labor_5Week_MA,\r\n          type: \"line\",\r\n        },\r\n      ];\r\n\r\n      let minNumber = Math.min(\r\n        _(data.Data.Labor_1Week_MA).chain().filter(_.isNumber).min().value(),\r\n        _(data.Data.Labor_yoy).chain().filter(_.isNumber).min().value(),\r\n        _(data.Data.Labor_5Week_MA).chain().filter(_.isNumber).min().value()\r\n      );\r\n      let maxNumber = Math.max(\r\n        _(data.Data.Labor_1Week_MA).chain().filter(_.isNumber).max().value(),\r\n        _(data.Data.Labor_yoy).chain().filter(_.isNumber).max().value(),\r\n        _(data.Data.Labor_5Week_MA).chain().filter(_.isNumber).max().value()\r\n      );\r\n\r\n      setMinGraphNumber(\r\n        parseInt(minNumber) === 0\r\n          ? parseInt(minNumber)\r\n          : parseInt(minNumber) - 2\r\n      );\r\n\r\n      setMaxGraphNumber(parseInt(maxNumber) + 2);\r\n      setGraphData(newData);\r\n      setShowProgress(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setShowProgress(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <LineGraph\r\n        previousMonth={previousMonth}\r\n        graphDate={graphDate}\r\n        graphData={graphData}\r\n        colors={[\"#0E83AE\", \"#75D2EB\", \"#FF0000\"]}\r\n        title=\"Labor Averages\"\r\n        yAxisText=\"% of Labor\"\r\n        stroke={{\r\n          width: [2, 1, 1],\r\n          curve: [\"smooth\", \"smooth\", \"smooth\"],\r\n          dashArray: [0, 5, 0],\r\n        }}\r\n        progress={showProgress}\r\n        setPrediction={(e) => setPredictionMonth(e)}\r\n        setPrevious={(e) => setPreviousMonth(e)}\r\n        min={parseInt(minGraphNumber)}\r\n        max={parseInt(maxGraphNumber)}\r\n        defaultPreviousText={previousMonthValue + \"M\"}\r\n        defaultPreviousValue={previousMonthValue}\r\n        defaultPredictionValue={predictionMonthValue}\r\n        defaultPredictionText={predictionMonthValue + \"M\"}\r\n        legendData={[\r\n          {\r\n            value1: \"1W\",\r\n\r\n            value2: parseFloat(legendData1).toFixed(1) + \"%\",\r\n\r\n            color: \"#0E83AE\",\r\n          },\r\n          {\r\n            value1: \"5W-YOY \",\r\n\r\n            value2: parseFloat(legendData2).toFixed(1) + \"%\",\r\n            color: \"#75D2EB\",\r\n          },\r\n          {\r\n            value1: \"5W\",\r\n            value2: parseFloat(legendData3).toFixed(1) + \"%\",\r\n            color: \"#FF0000\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaborPlot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport { getNetSale } from \"../Services/saleServices\";\r\nimport LineGraph from \"./SubComponents/LineGraph\";\r\n\r\nconst NetSalePlot = () => {\r\n  const [graphDate, setGraphDate] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [predictionMonthValue, setPredictionMonth] = useState(\"1\");\r\n  const [previousMonthValue, setPreviousMonth] = useState(\"3\");\r\n\r\n  const [showProgress, setShowProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    netSaleCalculation(previousMonthValue, predictionMonthValue);\r\n  }, [previousMonthValue, predictionMonthValue]);\r\n\r\n  let previousMonth = [\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"3M\",\r\n      value: \"3\",\r\n    },\r\n    {\r\n      text: \"12M\",\r\n      value: \"12\",\r\n    },\r\n    {\r\n      text: \"18M\",\r\n      value: \"18\",\r\n    },\r\n  ];\r\n\r\n  let predictionMonth = [\r\n    {\r\n      text: \"0M\",\r\n      value: \"0\",\r\n    },\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"6M\",\r\n      value: \"6\",\r\n    },\r\n  ];\r\n\r\n  const [minGraphNumber, setMinGraphNumber] = useState(0);\r\n  const [maxGraphNumber, setMaxGraphNumber] = useState(3000);\r\n\r\n  const [legendData1, setlegendData1] = useState(\"\");\r\n  const [legendData2, setlegendData2] = useState(\"\");\r\n  const [legendData3, setlegendData3] = useState(\"\");\r\n\r\n  const [predictionData, setPredictionData] = useState(null);\r\n\r\n  let netSaleCalculation = async (previous, prediction) => {\r\n    try {\r\n      setShowProgress(true);\r\n      let { data } = await getNetSale(previous, prediction);\r\n      let predictionDate = moment(data.Prediction.Date).format(\"MM/DD/yyyy\");\r\n\r\n      let predictionObject = {\r\n        date: predictionDate,\r\n        value: data.Prediction.Value,\r\n      };\r\n\r\n      let indexOfDate = data.Date.indexOf(data.Last_week_dates[0]);\r\n\r\n      let sampleArray = [];\r\n      for (let i = 0; i < data.Date.length; i++) {\r\n        sampleArray.push(null);\r\n      }\r\n\r\n      for (let i = 0; i < data.Last_week_data.length; i++) {\r\n        sampleArray[indexOfDate + i] = data.Last_week_data[i];\r\n      }\r\n\r\n      setPredictionData(predictionObject);\r\n      let date = data.Date.map((item) => {\r\n        let dateValue = moment(item).format(\"MM/DD/yyyy\");\r\n\r\n        return dateValue;\r\n      });\r\n\r\n      setGraphDate(date);\r\n\r\n      // let index = date.indexOf(moment().format(\"MM/DD/yyyy\"));\r\n\r\n      // let yesterday = moment().subtract(1, \"days\");\r\n\r\n      // let lastDayIndex = date.indexOf(moment(yesterday).format(\"MM/DD/yyyy\"));\r\n\r\n      let l1 = _.without(data.Data.Sales_3_Week_MA, \"\");\r\n\r\n      // let l2 = _.without(data.Data.Sales_3_Week_YoY_MA, \"\");\r\n      let l3 = _.without(data.Data.Sales_9_Week_MA, \"\");\r\n\r\n      setlegendData1(l1[l1.length - 1]);\r\n      setlegendData2(data.Data.Sales_3_Week_YoY_MA[l1.length - 1]);\r\n      setlegendData3(l3[l3.length - 1]);\r\n\r\n      let newData = [\r\n        {\r\n          name: \"Sales 3 Week MA \",\r\n          data: data.Data.Sales_3_Week_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Sales 3 Week YoY MA\",\r\n          data: data.Data.Sales_3_Week_YoY_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Sales 9 Week MA\",\r\n          data: data.Data.Sales_9_Week_MA,\r\n          type: \"line\",\r\n        },\r\n        {\r\n          name: \"Sales Last Week\",\r\n          data: sampleArray,\r\n          type: \"scatter\",\r\n          markers: {\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n\r\n      let minNumber = Math.min(\r\n        _(data.Data.Sales_3_Week_MA).chain().filter(_.isNumber).min().value(),\r\n        _(data.Data.Sales_3_Week_YoY_MA)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value(),\r\n        _(data.Data.Sales_9_Week_MA).chain().filter(_.isNumber).min().value(),\r\n        _(data.Last_week_data).chain().filter(_.isNumber).min().value()\r\n      );\r\n      let maxNumber = Math.max(\r\n        _(data.Data.Sales_3_Week_MA).chain().filter(_.isNumber).max().value(),\r\n        _(data.Data.Sales_3_Week_YoY_MA)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value(),\r\n        _(data.Data.Sales_9_Week_MA).chain().filter(_.isNumber).max().value(),\r\n        _(data.Last_week_data).chain().filter(_.isNumber).max().value()\r\n      );\r\n\r\n      setMinGraphNumber(\r\n        parseInt(minNumber) === 0\r\n          ? parseInt(minNumber)\r\n          : parseInt(minNumber) - 20\r\n      );\r\n\r\n      setMaxGraphNumber(parseInt(maxNumber) + 20);\r\n      setGraphData(newData);\r\n      setShowProgress(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setShowProgress(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <LineGraph\r\n        previousMonth={previousMonth}\r\n        predictionMonth={predictionMonth}\r\n        graphDate={graphDate}\r\n        graphData={graphData}\r\n        predictionData={predictionData}\r\n        colors={[\"#0E83AE\", \"#75D2EB\", \"#FF0000\", \"#ffffff\"]}\r\n        title=\"Net Sales\"\r\n        yAxisText=\"Sales\"\r\n        stroke={{\r\n          width: [2, 1, 1, 2],\r\n          curve: [\"smooth\", \"smooth\", \"smooth\", \"smooth\"],\r\n          dashArray: [0, 5, 0, 0],\r\n        }}\r\n        progress={showProgress}\r\n        setPrediction={(e) => setPredictionMonth(e)}\r\n        setPrevious={(e) => setPreviousMonth(e)}\r\n        min={parseInt(minGraphNumber)}\r\n        max={parseInt(maxGraphNumber)}\r\n        defaultPreviousText={previousMonthValue + \"M\"}\r\n        defaultPreviousValue={previousMonthValue}\r\n        defaultPredictionValue={predictionMonthValue}\r\n        defaultPredictionText={predictionMonthValue + \"M\"}\r\n        legendData={[\r\n          {\r\n            value1: \"3W\",\r\n            value2: \"$\" + legendData1,\r\n            color: \"#0E83AE\",\r\n          },\r\n          {\r\n            value1: \"9W\",\r\n            value2: \"$\" + legendData3,\r\n            color: \"#75D2EB\",\r\n          },\r\n          {\r\n            value1: \"3W-YOY\",\r\n            value2: \"$\" + legendData2,\r\n            color: \"#FF0000\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NetSalePlot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport CircularProgressGraph from \"./CircularProgressGraph\";\r\n\r\nconst MixGraph = ({\r\n  previousMonth,\r\n  predictionMonth,\r\n  graphDate,\r\n  graphData,\r\n  colors,\r\n  title,\r\n  yAxisText,\r\n  stroke,\r\n  min,\r\n  max,\r\n  progress,\r\n  ...props\r\n}) => {\r\n  let buttonGroup = {\r\n    border: \"1px solid #9BBB59\",\r\n    color: \"#9BBB59\",\r\n  };\r\n  let buttonGroupActive = {\r\n    border: \"1px solid #9BBB59\",\r\n    color: \"white\",\r\n    background: \"#9BBB59\",\r\n  };\r\n\r\n  let options = {\r\n    chart: {\r\n      height: 350,\r\n      type: \"line\",\r\n      foreColor: \"#9BBB59\",\r\n      animations: {\r\n        enabled: false,\r\n      },\r\n    },\r\n\r\n    colors: colors,\r\n\r\n    stroke: stroke,\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: graphDate,\r\n      tickAmount: 10,\r\n      labels: {\r\n        formatter: function (value, timestamp, opts) {\r\n          return opts.dateFormatter(new Date(timestamp), \"dd MMM yyyy\");\r\n        },\r\n      },\r\n    },\r\n    title: {\r\n      text: title,\r\n      align: \"center\",\r\n      style: {\r\n        fontSize: \"16px\",\r\n        color: \"#9BBB59\",\r\n      },\r\n    },\r\n\r\n    markers: {\r\n      size: 0,\r\n    },\r\n    yaxis: {\r\n      min: min,\r\n      max: max,\r\n      title: {\r\n        text: yAxisText,\r\n      },\r\n      labels: {\r\n        formatter: function (val) {\r\n          return val.toFixed(0);\r\n        },\r\n      },\r\n    },\r\n  };\r\n  const [activeButtonPreviousText, setActiveButtonPreviousText] =\r\n    useState(\"6M\");\r\n  const [activeButtonPreviousValue, setActiveButtonPreviousValue] =\r\n    useState(\"6\");\r\n  const [activeButtonPerductionText, setActiveButtonPerductionText] =\r\n    useState(\"6M\");\r\n  const [activeButtonPerductionValue, setActiveButtonPerductionValue] =\r\n    useState(\"6\");\r\n\r\n  let handelPreviousMonth = (text, value) => {\r\n    setActiveButtonPreviousText(text);\r\n    setActiveButtonPreviousValue(value);\r\n    props.setPrevious(value);\r\n  };\r\n  let handelPreductionMonth = (text, value) => {\r\n    setActiveButtonPerductionText(text);\r\n    setActiveButtonPerductionValue(value);\r\n    props.setPrediction(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setActiveButtonPerductionText(props.defaultPredictionText);\r\n    setActiveButtonPerductionValue(props.defaultPredictionValue);\r\n    setActiveButtonPreviousValue(props.defaultPreviousValue);\r\n    setActiveButtonPreviousText(props.defaultPreviousText);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          width: \"100%\",\r\n          justifyContent: \"space-between\",\r\n          paddingBottom: \"2%\",\r\n        }}\r\n      >\r\n        <ButtonGroup>\r\n          {previousMonth &&\r\n            previousMonth.map((item, index) => {\r\n              return (\r\n                <Button\r\n                  style={\r\n                    activeButtonPreviousText === item.text\r\n                      ? buttonGroupActive\r\n                      : buttonGroup\r\n                  }\r\n                  onClick={() => handelPreviousMonth(item.text, item.value)}\r\n                  key={index}\r\n                >\r\n                  {item.text}\r\n                </Button>\r\n              );\r\n            })}\r\n        </ButtonGroup>\r\n        <ButtonGroup>\r\n          {predictionMonth &&\r\n            predictionMonth.map((item, index) => {\r\n              return (\r\n                <Button\r\n                  style={\r\n                    activeButtonPerductionText === item.text\r\n                      ? buttonGroupActive\r\n                      : buttonGroup\r\n                  }\r\n                  onClick={() => handelPreductionMonth(item.text, item.value)}\r\n                  key={index}\r\n                >\r\n                  {item.text}\r\n                </Button>\r\n              );\r\n            })}\r\n        </ButtonGroup>\r\n      </div>\r\n\r\n      <ReactApexChart\r\n        options={options}\r\n        series={graphData}\r\n        type=\"line\"\r\n        height={500}\r\n      />\r\n\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          display: progress ? \"flex\" : \"none\",\r\n        }}\r\n      >\r\n        <CircularProgressGraph />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          width: \"100%\",\r\n          position: \"absolute\",\r\n          top: \"85px\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            justifyContent: \"space-around\",\r\n            paddingLeft: \"30%\",\r\n            paddingRight: \"30%\",\r\n          }}\r\n        >\r\n          {props.legendData &&\r\n            props.legendData.map((item, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <p style={{ color: item.color, fontSize: \"11px\" }}>\r\n                    {item.value1}\r\n                  </p>\r\n                  <p style={{ color: item.color, fontSize: \"11px\" }}>\r\n                    {item.value2}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MixGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { getOrderChange } from \"../Services/saleServices\";\r\nimport MixGraph from \"./SubComponents/MixGraph\";\r\nimport _ from \"lodash\";\r\n\r\nconst OrderChangePlot = () => {\r\n  const [graphDate, setGraphDate] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [previousMonthValue, setPreviousMonth] = useState(\"12\");\r\n  const [predictionMonthValue, setPredictionMonth] = useState(\"6\");\r\n\r\n  const [showProgress, setShowProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    netSaleCalculation(previousMonthValue);\r\n  }, [previousMonthValue]);\r\n\r\n  let previousMonth = [\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"3M\",\r\n      value: \"3\",\r\n    },\r\n    {\r\n      text: \"12M\",\r\n      value: \"12\",\r\n    },\r\n    {\r\n      text: \"18M\",\r\n      value: \"18\",\r\n    },\r\n  ];\r\n\r\n  const [minGraphNumber, setMinGraphNumber] = useState(0);\r\n  const [maxGraphNumber, setMaxGraphNumber] = useState(3000);\r\n\r\n  const [legendData1, setlegendData1] = useState(\"\");\r\n\r\n  const [legendData3, setlegendData3] = useState(\"\");\r\n\r\n  let netSaleCalculation = async (previous) => {\r\n    // const start = window.performance.now();\r\n\r\n    try {\r\n      setShowProgress(true);\r\n      let { data } = await getOrderChange(previous);\r\n\r\n      let date = data.Date.map((item) => {\r\n        let dateValue = moment(item).format(\"MM/DD/yyyy\");\r\n\r\n        return dateValue;\r\n      });\r\n      setGraphDate(date);\r\n\r\n      // let index = date.indexOf(moment().format(\"MM/DD/yyyy\"));\r\n\r\n      let l1 = _.without(data.Data.Orders_3Week_3_YoY_Diff_7, \"\");\r\n\r\n      let l3 = _.without(data.Data.Orders_9Week_3_YoY_Diff_7, \"\");\r\n\r\n      setlegendData1(l1[l1.length - 1]);\r\n\r\n      setlegendData3(l3[l3.length - 1]);\r\n\r\n      let newData = [\r\n        {\r\n          name: \"Sale 3 Week YoY Diff 7\",\r\n          data: data.Data.Orders_3Week_3_YoY_Diff_7,\r\n          type: \"bar\",\r\n        },\r\n        {\r\n          name: \"Sale 9 Week YoY Diff 7\",\r\n          data: data.Data.Orders_9Week_3_YoY_Diff_7,\r\n          type: \"line\",\r\n        },\r\n      ];\r\n      setGraphData(newData);\r\n\r\n      let minNumber = Math.min(\r\n        _(data.Data.Orders_3Week_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value(),\r\n        _(data.Data.Orders_9Week_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value()\r\n      );\r\n\r\n      let maxNumber = Math.max(\r\n        _(data.Data.Orders_3Week_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value(),\r\n        _(data.Data.Orders_9Week_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value()\r\n      );\r\n\r\n      setMinGraphNumber(\r\n        parseInt(minNumber) === 0\r\n          ? parseInt(minNumber)\r\n          : parseInt(minNumber) - 10\r\n      );\r\n\r\n      setMaxGraphNumber(parseInt(maxNumber) + 10);\r\n      setShowProgress(false);\r\n      // const stop = window.performance.now();\r\n\r\n      // console.log(\r\n      //   `Time Taken to execute YoY Order Change = ${\r\n      //     (stop - start) / 1000\r\n      //   } seconds`\r\n      // );\r\n    } catch (error) {\r\n      console.log(error);\r\n      setShowProgress(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MixGraph\r\n        previousMonth={previousMonth}\r\n        graphDate={graphDate}\r\n        graphData={graphData}\r\n        colors={[\"#0E83AE\", \"#FF0000\"]}\r\n        title=\"YOY Orders % Change\"\r\n        yAxisText=\"% of Orders\"\r\n        stroke={{\r\n          width: [0.7, 1],\r\n          curve: [\"smooth\", \"smooth\"],\r\n        }}\r\n        progress={showProgress}\r\n        setPrevious={(e) => setPreviousMonth(e)}\r\n        setPrediction={(e) => setPredictionMonth(e)}\r\n        min={minGraphNumber}\r\n        max={maxGraphNumber}\r\n        defaultPreviousText={previousMonthValue + \"M\"}\r\n        defaultPreviousValue={previousMonthValue}\r\n        defaultPredictionValue={predictionMonthValue}\r\n        defaultPredictionText={predictionMonthValue + \"M\"}\r\n        legendData={[\r\n          {\r\n            value1: \"3W\",\r\n            value2: parseFloat(legendData1).toFixed(1) + \"%\",\r\n            color: \"#0E83AE\",\r\n          },\r\n          {\r\n            value1: \"9W\",\r\n            value2: parseFloat(legendData3).toFixed(1) + \"%\",\r\n            color: \"#FF0000\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderChangePlot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { getSaleChange } from \"../Services/saleServices\";\r\nimport MixGraph from \"./SubComponents/MixGraph\";\r\nimport _ from \"lodash\";\r\n\r\nconst SaleChangePlot = () => {\r\n  const [graphDate, setGraphDate] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [previousMonthValue, setPreviousMonth] = useState(\"12\");\r\n  const [predictionMonthValue, setPredictionMonth] = useState(\"6\");\r\n\r\n  const [showProgress, setShowProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    netSaleCalculation(previousMonthValue);\r\n  }, [previousMonthValue]);\r\n\r\n  let previousMonth = [\r\n    {\r\n      text: \"1M\",\r\n      value: \"1\",\r\n    },\r\n    {\r\n      text: \"3M\",\r\n      value: \"3\",\r\n    },\r\n    {\r\n      text: \"12M\",\r\n      value: \"12\",\r\n    },\r\n    {\r\n      text: \"18M\",\r\n      value: \"18\",\r\n    },\r\n  ];\r\n\r\n  const [minGraphNumber, setMinGraphNumber] = useState(0);\r\n  const [maxGraphNumber, setMaxGraphNumber] = useState(3000);\r\n\r\n  const [legendData1, setlegendData1] = useState(\"\");\r\n\r\n  const [legendData3, setlegendData3] = useState(\"\");\r\n\r\n  let netSaleCalculation = async (previous) => {\r\n    try {\r\n      setShowProgress(true);\r\n      let { data } = await getSaleChange(previous);\r\n\r\n      let date = data.Date.map((item) => {\r\n        let dateValue = moment(item).format(\"MM/DD/yyyy\");\r\n\r\n        return dateValue;\r\n      });\r\n      setGraphDate(date);\r\n\r\n      // let yesterday = moment().subtract(1, \"days\");\r\n\r\n      let l1 = _.without(data.Data.Sales_3Week_3_3_YoY_Diff_7, \"\");\r\n\r\n      let l3 = _.without(data.Data.Sales_9Week_3_YoY_Diff_7, \"\");\r\n\r\n      setlegendData1(l1[l1.length - 1]);\r\n\r\n      setlegendData3(l3[l3.length - 1]);\r\n\r\n      let newData = [\r\n        {\r\n          name: \"Sale 3 Week YoY Diff 7\",\r\n          data: data.Data.Sales_3Week_3_3_YoY_Diff_7,\r\n          type: \"bar\",\r\n        },\r\n        {\r\n          name: \"Sale 9 Week YoY Diff 7\",\r\n          data: data.Data.Sales_9Week_3_YoY_Diff_7,\r\n          type: \"line\",\r\n        },\r\n      ];\r\n      setGraphData(newData);\r\n\r\n      let minNumber = Math.min(\r\n        _(data.Data.Sales_3Week_3_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value(),\r\n        _(data.Data.Sales_9Week_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .min()\r\n          .value()\r\n      );\r\n      let maxNumber = Math.max(\r\n        _(data.Data.Sales_3Week_3_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value(),\r\n        _(data.Data.Sales_9Week_3_YoY_Diff_7)\r\n          .chain()\r\n          .filter(_.isNumber)\r\n          .max()\r\n          .value()\r\n      );\r\n\r\n      setMinGraphNumber(\r\n        parseInt(minNumber) === 0\r\n          ? parseInt(minNumber)\r\n          : parseInt(minNumber) - 10\r\n      );\r\n\r\n      setMaxGraphNumber(parseInt(maxNumber) + 10);\r\n      setShowProgress(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setShowProgress(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MixGraph\r\n        previousMonth={previousMonth}\r\n        graphDate={graphDate}\r\n        graphData={graphData}\r\n        colors={[\"#0E83AE\", \"#FF0000\"]}\r\n        title=\"YOY Sales % Change\"\r\n        yAxisText=\"% of Sales\"\r\n        stroke={{\r\n          width: [0.7, 1],\r\n          curve: [\"smooth\", \"smooth\"],\r\n        }}\r\n        progress={showProgress}\r\n        setPrevious={(e) => setPreviousMonth(e)}\r\n        setPrediction={(e) => setPredictionMonth(e)}\r\n        min={minGraphNumber}\r\n        max={maxGraphNumber}\r\n        defaultPreviousText={previousMonthValue + \"M\"}\r\n        defaultPreviousValue={previousMonthValue}\r\n        defaultPredictionValue={predictionMonthValue}\r\n        defaultPredictionText={predictionMonthValue + \"M\"}\r\n        legendData={[\r\n          {\r\n            value1: \"3W\",\r\n            value2: parseFloat(legendData1).toFixed(1) + \"%\",\r\n            color: \"#0E83AE\",\r\n          },\r\n          {\r\n            value1: \"9W\",\r\n            value2: parseFloat(legendData3).toFixed(1) + \"%\",\r\n            color: \"#FF0000\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SaleChangePlot;\r\n","import React from \"react\";\r\nimport DailyOrdersPlot from \"./Components/DailyOrdersPlot\";\r\nimport FridaysPlot from \"./Components/FridaysPlot\";\r\nimport LaborPlot from \"./Components/LaborPlot\";\r\nimport NetSalePlot from \"./Components/NetSalePlot\";\r\nimport OrderChangePlot from \"./Components/OrderChangePlot\";\r\nimport SaleChangePlot from \"./Components/SaleChangePlot\";\r\nimport EmailButton from \"./Components/SubComponents/EmailButton\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <>\r\n      {/* <EmailButton /> */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          width: \"100%\",\r\n          justifyContent: \"center\",\r\n          marginTop: \"2%\",\r\n        }}\r\n      >\r\n        <h1 style={{ color: \"#9BBB59\" }}>Shiftprep Analysis</h1>\r\n      </div>\r\n      <div className=\"main-home\">\r\n        <br />\r\n        <NetSalePlot />\r\n        <br />\r\n        <DailyOrdersPlot />\r\n        <br />\r\n        <SaleChangePlot />\r\n        <br />\r\n        <OrderChangePlot />\r\n        <br />\r\n        <FridaysPlot />\r\n        <br />\r\n        <LaborPlot />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nimport Main from \"./Main\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Main />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}